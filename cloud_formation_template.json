{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "VpcCidr": {
          "Type": "String",
          "Description": "Enter IPv4 CIDR Block of VPC"
        },
        "SubnetCidr1": {
          "Type": "String"
        },
        "SubnetCidr2": {
          "Type": "String"
        },
        "SubnetCidr3": {
          "Type": "String"
        },
        "region": {
          "Type": "String"
        },
        "Name": {
          "Type": "String"
        },
        "EC2Addr": {
            "Type": "String"
          },
        "LatestAMI": {
        "Type": "String"
        },
        "KeyPair": {
        "Type": "String"
        }
      },
    "Resources": {
      "VPC1": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "CidrBlock": { "Ref": "VpcCidr" },
          "EnableDnsSupport": "true",
          "EnableDnsHostnames": "true",
          "Tags": [{ "Key": "Name", "Value": { "Ref": "Name" } }]
        }
      },
      "PublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": { "Ref": "SubnetCidr1" },
          "AvailabilityZone": {"Fn::Select": [0, { "Fn::GetAZs": { "Ref": "region" } }]},
          "VpcId": {"Ref": "VPC1"}
        }
      },
      "PublicSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": { "Ref": "SubnetCidr2" },
          "AvailabilityZone": {"Fn::Select": [1, { "Fn::GetAZs": { "Ref": "region" } }]},
          "VpcId": {"Ref": "VPC1"}
        }
      },
      "PublicSubnet3": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "CidrBlock": { "Ref": "SubnetCidr3" },
          "AvailabilityZone": {"Fn::Select": [2, { "Fn::GetAZs": { "Ref": "region" } }]},
          "VpcId": {"Ref": "VPC1"}
        }
      },
      "RouteTable1": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {"Ref": "VPC1"}
        }
      },
      "Subnet1RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": { "Ref": "RouteTable1" },
          "SubnetId": { "Ref": "PublicSubnet1" }
        }
      },
      "Subnet2RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": { "Ref": "RouteTable1" },
          "SubnetId": { "Ref": "PublicSubnet2" }
        }
      },
      "Subnet3RouteTableAssociation": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": { "Ref": "RouteTable1" },
          "SubnetId": { "Ref": "PublicSubnet3" }
        }
      },
      "InternetGateway1": {
        "Type": "AWS::EC2::InternetGateway"
      },
      "InternetGateway1Attachment": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "InternetGatewayId": { "Ref": "InternetGateway1" },
          "VpcId": { "Ref": "VPC1" }
        }
      },
      "Route1": {
        "Type": "AWS::EC2::Route",
        "DependsOn": ["InternetGateway1", "InternetGateway1Attachment"],
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "GatewayId": {"Ref": "InternetGateway1"},
          "RouteTableId": {"Ref": "RouteTable1"}
        }
      },
      "DHCPSet1": {
        "Type": "AWS::EC2::DHCPOptions",
        "Properties": {
          "DomainName": "ec2.internal",
          "DomainNameServers": [
            "AmazonProvidedDNS"
          ]
        }
      },
      "AccessControlList1": {
        "Type": "AWS::EC2::NetworkAcl",
        "Properties": {
          "VpcId": {
            "Ref": "VPC1"
          }
        }
      },
      "EC2CSYE6225": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
                },
              "Action": ["sts:AssumeRole"],
            }]
          },
          "Path": "/"
        }
      },
      "EC2CSYE6225InstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/",
          "Roles": [{ "Ref": "EC2CSYE6225" }]
         }
      },
      "WebAppS3": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Sid": "AllowAllUsersToListAccounts",
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": [
                          {"Fn::GetAtt":["S3Bucket1","Arn"]}
                      ]
                      },
                      {
                        "Sid": "BucketLevelPermissionForAppsToListAllObjects",
                        "Effect": "Allow",
                        "Action": ["s3:ListBucket"],
                        "Resource": [{"Fn::GetAtt":["S3Bucket1","Arn"]}]                        
                      },
                      {
                        "Sid": "ObjectLevelPermissionForAppsToCRUD",
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:GetObject",
                          "s3:DeleteObject"
                        ],
                        "Resource": [
                          { "Fn::Join" : [ "", [{"Fn::GetAtt":["S3Bucket1","Arn"]} , "/*" ] ] }
                        ]
                      },
                      {
                        "Sid": "AllowConsoleToListBuckets",
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetBucketLocation",
                          "s3:ListAllMyBuckets"
                        ],
                        "Resource": "*"
                      }
                    ]
                },
                "Roles": [{ "Ref": "EC2CSYE6225" }]
            }
        },
      "EC2Instance1": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "BlockDeviceMappings" : [
            {
              "DeviceName" : "/dev/xvda",
              "Ebs" : {
                "DeleteOnTermination" : "true",
                "Encrypted" : "false",
                "VolumeSize" : 20,
                "VolumeType" : "gp2"
              }
            }
          ],
          "DisableApiTermination": "false",
          "InstanceInitiatedShutdownBehavior": "stop",
          "IamInstanceProfile": {"Ref": "EC2CSYE6225InstanceProfile"},
          "ImageId": {"Ref": "LatestAMI"},
          "InstanceType": "t2.micro",
          "KeyName": { "Ref": "KeyPair" },
          "Monitoring": "false",
          "Tags": [
            {
              "Key": "Name",
              "Value": "BaseEC2Assignment6"
            }
          ],
          "NetworkInterfaces": [
            {
              "DeleteOnTermination": "true",
              "Description": "Primary network interface",
              "DeviceIndex": 0,
              "SubnetId": {
                "Ref": "PublicSubnet1"
              },
              "PrivateIpAddresses": [
                {
                  "PrivateIpAddress": { "Ref": "EC2Addr" }, 
                  "Primary": "true"
                }
              ],
              "GroupSet": [
                {
                  "Ref": "SecurityGroup1"
                }
              ],
              "AssociatePublicIpAddress": "true"
            }
          ],
          "UserData":{  
            "Fn::Base64":{  
                "Fn::Join":[  
                    "",
                    [  
                        "#!/bin/bash \n",
                        "echo export POSTGRES_HOST=",{"Fn::GetAtt":["RDSPostgres1","Endpoint.Address"]}," >> /etc/environment \n",
                        "echo export POSTGRES_PORT=",{"Fn::GetAtt":["RDSPostgres1","Endpoint.Port"]}," >> /etc/environment \n",
                        "echo export S3_ARN=",{"Fn::GetAtt":["S3Bucket1","Arn"]}," >> /etc/environment \n",
                        "echo export S3_DNS=",{"Fn::GetAtt":["S3Bucket1","DomainName"]}," >> /etc/environment \n",
                        "echo export POSTGRES_USERNAME='postgres' >> /etc/environment \n",
                        "echo export POSTGRES_PASSWORD='postgres' >> /etc/environment \n",
                        "echo export POSTGRES_DBNAME='postgres' >> /etc/environment \n",
                        "echo export FLASK_ENV='development' >> /etc/environment \n",
                        "cd /home/ubuntu \n",
                        "sudo apt-get update \n",
                        "sudo apt-get upgrade \n",
                        "sudo apt-get dist-upgrade \n",
                        "sudo apt-get autoremove \n",
                        "sudo apt-get autoclean \n",
                        "sudo snap install aws-cli --classic \n",
                        "sudo pip3 install minio \n",
                        "sudo pip3 install boto3 \n",
                        "sudo git clone https://github.com/chakravartys-spring2020/webapp.git \n",
                        "cd webapp/ \n",
                        "sudo mkdir attachments \n",   
                        "sudo python3 manage.py db init \n",       
                        "sudo python3 manage.py db migrate \n",       
                        "sudo python3 manage.py db upgrade \n",               
                        "sudo nohup python3 run.py & \n"
                    ]
                ]
            }
        }
        }
      },
      "S3Bucket1": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "AccessControl": "Private",
          "BucketEncryption": 
          {
            "ServerSideEncryptionConfiguration": 
            [
              { "ServerSideEncryptionByDefault": { "SSEAlgorithm": "AES256" } }
            ]
          },
          "LifecycleConfiguration" : 
            {
              "Rules" : 
              [
                {
                  "Transition" : 
                  {
                    "StorageClass" : "STANDARD_IA",
                    "TransitionInDays" : 30
                  },
                  "Status" : "Enabled"
                }
              ]
            },
          "VersioningConfiguration": {
            "Status": "Suspended"
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "Bucket1"
            }
          ]
        }
      },
      "RDSPostgres1": {
        "Type": "AWS::RDS::DBInstance",
        "Properties": {
          "AllocatedStorage": "20",
          "AllowMajorVersionUpgrade": "false",
          "AutoMinorVersionUpgrade": "true",
          "AvailabilityZone" : "us-east-2c",
          "DBInstanceClass": "db.m4.large",
          "MultiAZ":"false",
          "Port": "5432",
          "PubliclyAccessible": "true",
          "StorageType": "gp2",
          "BackupRetentionPeriod": "7",
          "MasterUsername": "postgres",
          "MasterUserPassword": "postgres",
          "PreferredBackupWindow": "08:10-08:40",
          "PreferredMaintenanceWindow": "sun:06:35-sun:07:05",
          "DBName": "postgres",
          "Engine": "postgres",
          "EngineVersion": "11.6",
          "LicenseModel": "postgresql-license",
          "DBSubnetGroupName": {
            "Ref": "DatabaseSubnetVPC1"
          },
          "VPCSecurityGroups": [
            { "Ref":"SecurityGroup1"}
          ]
        }
      },
      "DatabaseSubnetVPC1": {
        "Type": "AWS::RDS::DBSubnetGroup",
        "Properties": {
          "DBSubnetGroupDescription": "Created from the RDS Management Console",
          "SubnetIds": [
            {
              "Ref": "PublicSubnet3"
            },
            {
              "Ref": "PublicSubnet2"
            },
            {
              "Ref": "PublicSubnet1"
            }
          ]
        }
      },
      "SecurityGroup1": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "GroupDescription": "BaseAssignment6",
          "VpcId": {
            "Ref": "VPC1"
          }
        }
      },
      "NetworkACLEntry1": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "CidrBlock": "0.0.0.0/0",
          "Egress": "true",
          "Protocol": "-1",
          "RuleAction": "allow",
          "RuleNumber": "100",
          "NetworkAclId": {
            "Ref": "AccessControlList1"
          }
        }
      },
      "NetworkACLEntry2": {
        "Type": "AWS::EC2::NetworkAclEntry",
        "Properties": {
          "CidrBlock": "0.0.0.0/0",
          "Protocol": "-1",
          "RuleAction": "allow",
          "RuleNumber": "100",
          "NetworkAclId": {
            "Ref": "AccessControlList1"
          }
        }
      },
      "SubnetNetworkAssociation1": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "NetworkAclId": {
            "Ref": "AccessControlList1"
          },
          "SubnetId": {
            "Ref": "PublicSubnet1"
          }
        }
      },
      "SubnetNetworkAssociation2": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "NetworkAclId": {
            "Ref": "AccessControlList1"
          },
          "SubnetId": {
            "Ref": "PublicSubnet2"
          }
        }
      },
      "SubnetNetworkAssociation3": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
          "NetworkAclId": {
            "Ref": "AccessControlList1"
          },
          "SubnetId": {
            "Ref": "PublicSubnet3"
          }
        }
      }, 
      "DHCPAssociation1": {
        "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
        "Properties": {
          "VpcId": {
            "Ref": "VPC1"
          },
          "DhcpOptionsId": {
            "Ref": "DHCPSet1"
          }
        }
      },
      "Ingress1": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "SecurityGroup1"
          },
          "IpProtocol": "tcp",
          "FromPort": "5432",
          "ToPort": "5432",
          "CidrIp": "0.0.0.0/0"
        }
      },
      "Ingress2": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "SecurityGroup1"
          },
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": "0.0.0.0/0"
        }
      },
      "Ingress3": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "SecurityGroup1"
          },
          "IpProtocol": "tcp",
          "FromPort": "5000",
          "ToPort": "5000",
          "CidrIp": "0.0.0.0/0"
        }
      },
      "Ingress4": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
          "GroupId": {
            "Ref": "SecurityGroup1"
          },
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp": "0.0.0.0/0"
        }
      },
      "Egress1": {
        "Type": "AWS::EC2::SecurityGroupEgress",
        "Properties": {
          "GroupId": {
            "Ref": "SecurityGroup1"
          },
          "IpProtocol": "-1",
          "CidrIp": "0.0.0.0/0"
        }
      }
    },
    "Description": "Srinjoy Networking Stack - CSYE 6225 Spring 2020 - Assignment 6"
  }
  